#nullable enable
Funcky.Async.Extensions.AsyncEnumerableExtensions
Funcky.Async.Functional
Funcky.AsyncSequence
Funcky.IAsyncBuffer<TSource>
Funcky.Monads.EitherAsyncExtensions
Funcky.Monads.OptionAsyncExtensions
Funcky.Monads.ResultAsyncExtensions
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AdjacentGroupBy<TSource, TKey, TElement, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector, System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>!, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AdjacentGroupBy<TSource, TKey, TElement, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector, System.Func<TKey, System.Collections.Immutable.IImmutableList<TElement>!, TResult>! resultSelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AdjacentGroupBy<TSource, TKey, TElement>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector) -> System.Collections.Generic.IAsyncEnumerable<System.Linq.IAsyncGrouping<TKey, TElement>!>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AdjacentGroupBy<TSource, TKey, TElement>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.Collections.Generic.IAsyncEnumerable<System.Linq.IAsyncGrouping<TKey, TElement>!>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AdjacentGroupBy<TSource, TKey, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AdjacentGroupBy<TSource, TKey, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>!, TResult>! resultSelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AdjacentGroupBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IAsyncEnumerable<System.Linq.IAsyncGrouping<TKey, TSource>!>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AdjacentGroupBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.Collections.Generic.IAsyncEnumerable<System.Linq.IAsyncGrouping<TKey, TSource>!>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AdjacentGroupByAwait<TSource, TKey, TElement, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<TKey>>! keySelector, System.Func<TSource, System.Threading.Tasks.ValueTask<TElement>>! elementSelector, System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>!, System.Threading.Tasks.ValueTask<TResult>>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AdjacentGroupByAwait<TSource, TKey, TElement, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<TKey>>! keySelector, System.Func<TSource, System.Threading.Tasks.ValueTask<TElement>>! elementSelector, System.Func<TKey, System.Collections.Immutable.IImmutableList<TElement>!, System.Threading.Tasks.ValueTask<TResult>>! resultSelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AdjacentGroupByAwait<TSource, TKey, TElement>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<TKey>>! keySelector, System.Func<TSource, System.Threading.Tasks.ValueTask<TElement>>! elementSelector) -> System.Collections.Generic.IAsyncEnumerable<System.Linq.IAsyncGrouping<TKey, TElement>!>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AdjacentGroupByAwait<TSource, TKey, TElement>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<TKey>>! keySelector, System.Func<TSource, System.Threading.Tasks.ValueTask<TElement>>! elementSelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.Collections.Generic.IAsyncEnumerable<System.Linq.IAsyncGrouping<TKey, TElement>!>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AdjacentGroupByAwait<TSource, TKey, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<TKey>>! keySelector, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>!, System.Threading.Tasks.ValueTask<TResult>>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AdjacentGroupByAwait<TSource, TKey, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<TKey>>! keySelector, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>!, System.Threading.Tasks.ValueTask<TResult>>! resultSelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AdjacentGroupByAwait<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<TKey>>! keySelector) -> System.Collections.Generic.IAsyncEnumerable<System.Linq.IAsyncGrouping<TKey, TSource>!>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AdjacentGroupByAwait<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<TKey>>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.Collections.Generic.IAsyncEnumerable<System.Linq.IAsyncGrouping<TKey, TSource>!>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AdjacentGroupByAwaitWithCancellation<TSource, TKey, TElement, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TKey>>! keySelector, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TElement>>! elementSelector, System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>!, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TResult>>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AdjacentGroupByAwaitWithCancellation<TSource, TKey, TElement, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TKey>>! keySelector, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TElement>>! elementSelector, System.Func<TKey, System.Collections.Immutable.IImmutableList<TElement>!, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TResult>>! resultSelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AdjacentGroupByAwaitWithCancellation<TSource, TKey, TElement>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TKey>>! keySelector, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TElement>>! elementSelector) -> System.Collections.Generic.IAsyncEnumerable<System.Linq.IAsyncGrouping<TKey, TElement>!>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AdjacentGroupByAwaitWithCancellation<TSource, TKey, TElement>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TKey>>! keySelector, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TElement>>! elementSelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.Collections.Generic.IAsyncEnumerable<System.Linq.IAsyncGrouping<TKey, TElement>!>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AdjacentGroupByAwaitWithCancellation<TSource, TKey, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TKey>>! keySelector, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>!, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TResult>>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AdjacentGroupByAwaitWithCancellation<TSource, TKey, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TKey>>! keySelector, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>!, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TResult>>! resultSelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AdjacentGroupByAwaitWithCancellation<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TKey>>! keySelector) -> System.Collections.Generic.IAsyncEnumerable<System.Linq.IAsyncGrouping<TKey, TSource>!>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AdjacentGroupByAwaitWithCancellation<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TKey>>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.Collections.Generic.IAsyncEnumerable<System.Linq.IAsyncGrouping<TKey, TSource>!>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AnyOrElse<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Collections.Generic.IAsyncEnumerable<TSource>! fallback) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AnyOrElse<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<System.Collections.Generic.IAsyncEnumerable<TSource>!>! fallback) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAsync(this System.Collections.Generic.IAsyncEnumerable<Funcky.Monads.Option<decimal>>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<decimal>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAsync(this System.Collections.Generic.IAsyncEnumerable<Funcky.Monads.Option<double>>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<double>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAsync(this System.Collections.Generic.IAsyncEnumerable<Funcky.Monads.Option<float>>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<float>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAsync(this System.Collections.Generic.IAsyncEnumerable<Funcky.Monads.Option<int>>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<double>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAsync(this System.Collections.Generic.IAsyncEnumerable<Funcky.Monads.Option<long>>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<double>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAsync(this System.Collections.Generic.IAsyncEnumerable<decimal>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<decimal>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAsync(this System.Collections.Generic.IAsyncEnumerable<double>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<double>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAsync(this System.Collections.Generic.IAsyncEnumerable<float>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<float>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAsync(this System.Collections.Generic.IAsyncEnumerable<int>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<double>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAsync(this System.Collections.Generic.IAsyncEnumerable<long>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<double>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, Funcky.Monads.Option<decimal>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<decimal>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, Funcky.Monads.Option<double>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<double>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, Funcky.Monads.Option<float>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<float>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, Funcky.Monads.Option<int>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<double>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, Funcky.Monads.Option<long>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<double>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, decimal>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<decimal>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, double>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<double>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, float>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<float>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, int>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<double>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, long>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<double>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAwaitAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<Funcky.Monads.Option<decimal>>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<decimal>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAwaitAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<Funcky.Monads.Option<double>>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<double>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAwaitAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<Funcky.Monads.Option<float>>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<float>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAwaitAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<Funcky.Monads.Option<int>>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<double>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAwaitAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<Funcky.Monads.Option<long>>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<double>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAwaitAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<decimal>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<decimal>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAwaitAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<double>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<double>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAwaitAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<float>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<float>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAwaitAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<int>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<double>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAwaitAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<long>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<double>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAwaitWithCancellationAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<Funcky.Monads.Option<decimal>>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<decimal>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAwaitWithCancellationAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<Funcky.Monads.Option<double>>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<double>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAwaitWithCancellationAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<Funcky.Monads.Option<float>>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<float>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAwaitWithCancellationAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<Funcky.Monads.Option<int>>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<double>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAwaitWithCancellationAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<Funcky.Monads.Option<long>>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<double>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAwaitWithCancellationAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<decimal>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<decimal>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAwaitWithCancellationAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<double>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<double>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAwaitWithCancellationAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<float>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<float>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAwaitWithCancellationAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<int>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<double>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.AverageOrNoneAwaitWithCancellationAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<long>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<double>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.Chunk<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int size, System.Func<System.Collections.Generic.IReadOnlyList<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.Chunk<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int size) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyList<TSource>!>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.ChunkAwait<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int size, System.Func<System.Collections.Generic.IReadOnlyList<TSource>!, System.Threading.Tasks.ValueTask<TResult>>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.ChunkAwaitWithCancellation<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int size, System.Func<System.Collections.Generic.IReadOnlyList<TSource>!, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TResult>>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.ConcatToStringAsync<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source) -> System.Threading.Tasks.Task<string!>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.ElementAtOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int index, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.ExclusiveScan<TSource, TAccumulate>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TAccumulate seed, System.Func<TAccumulate, TSource, TAccumulate>! accumulator) -> System.Collections.Generic.IAsyncEnumerable<TAccumulate>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.ExclusiveScanAwait<TSource, TAccumulate>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TAccumulate seed, System.Func<TAccumulate, TSource, System.Threading.Tasks.ValueTask<TAccumulate>>! accumulator) -> System.Collections.Generic.IAsyncEnumerable<TAccumulate>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.ExclusiveScanAwaitWithCancellation<TSource, TAccumulate>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TAccumulate seed, System.Func<TAccumulate, TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TAccumulate>>! accumulator) -> System.Collections.Generic.IAsyncEnumerable<TAccumulate>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.FirstOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, bool>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.FirstOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.FirstOrNoneAwaitAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<bool>>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.FirstOrNoneAwaitWithCancellationAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<bool>>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.InclusiveScan<TSource, TAccumulate>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TAccumulate seed, System.Func<TAccumulate, TSource, TAccumulate>! accumulator) -> System.Collections.Generic.IAsyncEnumerable<TAccumulate>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.InclusiveScanAwait<TSource, TAccumulate>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TAccumulate seed, System.Func<TAccumulate, TSource, System.Threading.Tasks.ValueTask<TAccumulate>>! accumulator) -> System.Collections.Generic.IAsyncEnumerable<TAccumulate>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.InclusiveScanAwaitWithCancellation<TSource, TAccumulate>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TAccumulate seed, System.Func<TAccumulate, TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TAccumulate>>! accumulator) -> System.Collections.Generic.IAsyncEnumerable<TAccumulate>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.Inspect<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Action<TSource>! action) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.InspectAwait<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask>! action) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.InspectAwaitWithCancellation<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask>! action) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.Interleave<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! sequence, params System.Collections.Generic.IAsyncEnumerable<TSource>![]! otherSequences) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.Interleave<TSource>(this System.Collections.Generic.IEnumerable<System.Collections.Generic.IAsyncEnumerable<TSource>!>! source) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.Intersperse<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource element) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.JoinToStringAsync<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, char separator) -> System.Threading.Tasks.Task<string!>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.JoinToStringAsync<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, string! separator) -> System.Threading.Tasks.Task<string!>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.LastOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, bool>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.LastOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.LastOrNoneAwaitAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<bool>>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.LastOrNoneAwaitWithCancellationAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<bool>>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.MaterializeAsync<TItem, TMaterialization>(this System.Collections.Generic.IAsyncEnumerable<TItem>! source, System.Func<System.Collections.Generic.IAsyncEnumerable<TItem>!, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TMaterialization>>! materialize, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyCollection<TItem>!>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.MaterializeAsync<TItem>(this System.Collections.Generic.IAsyncEnumerable<TItem>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyCollection<TItem>!>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.MaxOrNoneAsync<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, Funcky.Monads.Option<TResult>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TResult>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.MaxOrNoneAsync<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TResult>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TResult>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.MaxOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<Funcky.Monads.Option<TSource>>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.MaxOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.MaxOrNoneAwaitAsync<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TResult>>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TResult>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.MaxOrNoneAwaitAsync<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<TResult>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TResult>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.MaxOrNoneAwaitWithCancellationAsync<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TResult>>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TResult>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.MaxOrNoneAwaitWithCancellationAsync<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TResult>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TResult>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.Memoize<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! sequence) -> Funcky.IAsyncBuffer<TSource>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.MinOrNoneAsync<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, Funcky.Monads.Option<TResult>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TResult>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.MinOrNoneAsync<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TResult>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TResult>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.MinOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<Funcky.Monads.Option<TSource>>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.MinOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.MinOrNoneAwaitAsync<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TResult>>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TResult>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.MinOrNoneAwaitAsync<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<TResult>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TResult>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.MinOrNoneAwaitWithCancellationAsync<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TResult>>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TResult>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.MinOrNoneAwaitWithCancellationAsync<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TResult>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TResult>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.Merge<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! sequence1, System.Collections.Generic.IAsyncEnumerable<TSource>! sequence2, Funcky.Monads.Option<System.Collections.Generic.IComparer<TSource>!> comparer = default(Funcky.Monads.Option<System.Collections.Generic.IComparer<TSource>!>)) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.Merge<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! sequence1, System.Collections.Generic.IAsyncEnumerable<TSource>! sequence2, System.Collections.Generic.IAsyncEnumerable<TSource>! sequence3, Funcky.Monads.Option<System.Collections.Generic.IComparer<TSource>!> comparer = default(Funcky.Monads.Option<System.Collections.Generic.IComparer<TSource>!>)) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.Merge<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! sequence1, System.Collections.Generic.IAsyncEnumerable<TSource>! sequence2, System.Collections.Generic.IAsyncEnumerable<TSource>! sequence3, System.Collections.Generic.IAsyncEnumerable<TSource>! sequence4, Funcky.Monads.Option<System.Collections.Generic.IComparer<TSource>!> comparer = default(Funcky.Monads.Option<System.Collections.Generic.IComparer<TSource>!>)) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.Merge<TSource>(this System.Collections.Generic.IEnumerable<System.Collections.Generic.IAsyncEnumerable<TSource>!>! sources, Funcky.Monads.Option<System.Collections.Generic.IComparer<TSource>!> comparer = default(Funcky.Monads.Option<System.Collections.Generic.IComparer<TSource>!>)) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.Pairwise<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TSource, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.Pairwise<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source) -> System.Collections.Generic.IAsyncEnumerable<(TSource Front, TSource Back)>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.PowerSet<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IEnumerable<TSource>!>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.Sequence<TEnvironment, TSource>(this System.Collections.Generic.IAsyncEnumerable<Funcky.Monads.Reader<TEnvironment, TSource>!>! sequence) -> Funcky.Monads.Reader<TEnvironment, System.Collections.Generic.IAsyncEnumerable<TSource>!>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.Sequence<TSource>(this System.Collections.Generic.IAsyncEnumerable<System.Lazy<TSource>!>! sequence) -> System.Lazy<System.Collections.Generic.IAsyncEnumerable<TSource>!>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.SequenceAsync<TLeft, TSource>(this System.Collections.Generic.IAsyncEnumerable<Funcky.Monads.Either<TLeft, TSource>>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Either<TLeft, System.Collections.Generic.IReadOnlyList<TSource>!>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.SequenceAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<Funcky.Monads.Option<TSource>>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<System.Collections.Generic.IReadOnlyList<TSource>!>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.SequenceAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<Funcky.Monads.Result<TSource>>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Result<System.Collections.Generic.IReadOnlyList<TSource>!>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.ShuffleAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Random! random, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyList<TSource>!>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.ShuffleAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyList<TSource>!>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.SingleOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, bool>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.SingleOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.SingleOrNoneAwaitAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<bool>>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.SingleOrNoneAwaitWithCancellationAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<bool>>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.SlidingWindow<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int width) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyList<TSource>!>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.Split<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource separator, System.Collections.Generic.IEqualityComparer<TSource>! equalityComparer, System.Func<System.Collections.Generic.IReadOnlyList<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.Split<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource separator) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyList<TSource>!>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.Split<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource separator, System.Collections.Generic.IEqualityComparer<TSource>! equalityComparer) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyList<TSource>!>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.TakeEvery<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int interval) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.Transpose<TSource>(this System.Collections.Generic.IEnumerable<System.Collections.Generic.IAsyncEnumerable<TSource>!>! source) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IEnumerable<TSource>!>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.Traverse<TSource, T>(System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Lazy<T>!>! selector) -> System.Lazy<System.Collections.Generic.IAsyncEnumerable<T>!>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.Traverse<TSource, TEnvironment, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, Funcky.Monads.Reader<TEnvironment, TResult>!>! selector) -> Funcky.Monads.Reader<TEnvironment, System.Collections.Generic.IAsyncEnumerable<TResult>!>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.TraverseAsync<TSource, TItem>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, Funcky.Monads.Option<TItem>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<System.Collections.Generic.IReadOnlyList<TItem>!>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.TraverseAsync<TSource, TLeft, TRight>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, Funcky.Monads.Either<TLeft, TRight>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Either<TLeft, System.Collections.Generic.IReadOnlyList<TRight>!>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.TraverseAsync<TSource, TValidResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, Funcky.Monads.Result<TValidResult>>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Result<System.Collections.Generic.IReadOnlyList<TValidResult>!>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.WhereNotNull<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource?>! source) -> System.Collections.Generic.IAsyncEnumerable<TSource!>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.WhereNotNull<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource?>! source) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.WhereSelect<TItem>(this System.Collections.Generic.IAsyncEnumerable<Funcky.Monads.Option<TItem>>! source) -> System.Collections.Generic.IAsyncEnumerable<TItem>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.WhereSelect<TSource, TOutput>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, Funcky.Monads.Option<TOutput>>! selector) -> System.Collections.Generic.IAsyncEnumerable<TOutput>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.WhereSelectAwait<TSource, TOutput>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TOutput>>>! selector) -> System.Collections.Generic.IAsyncEnumerable<TOutput>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.WhereSelectAwaitWithCancellation<TSource, TOutput>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TOutput>>>! selector) -> System.Collections.Generic.IAsyncEnumerable<TOutput>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.WithIndex<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source) -> System.Collections.Generic.IAsyncEnumerable<Funcky.Extensions.ValueWithIndex<TSource>>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.WithLast<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source) -> System.Collections.Generic.IAsyncEnumerable<Funcky.Extensions.ValueWithLast<TSource>>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.WithPrevious<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source) -> System.Collections.Generic.IAsyncEnumerable<Funcky.Extensions.ValueWithPrevious<TSource>>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.ZipLongest<TLeft, TRight, TResult>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, System.Func<Funcky.EitherOrBoth<TLeft, TRight>, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.ZipLongest<TLeft, TRight>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right) -> System.Collections.Generic.IAsyncEnumerable<Funcky.EitherOrBoth<TLeft, TRight>>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.NoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source) -> System.Threading.Tasks.ValueTask<bool>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.NoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, bool>! predicate) -> System.Threading.Tasks.ValueTask<bool>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.NoneAwaitAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<bool>>! predicate) -> System.Threading.Tasks.ValueTask<bool>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.NoneAwaitWithCancellationAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<bool>>! predicate) -> System.Threading.Tasks.ValueTask<bool>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.WithFirst<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source) -> System.Collections.Generic.IAsyncEnumerable<Funcky.Extensions.ValueWithFirst<TSource>>!
static Funcky.Async.Functional.RetryAsync<TResult>(System.Func<System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TResult>>>! producer, Funcky.RetryPolicies.IRetryPolicy! retryPolicy, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TResult>>
static Funcky.Async.Functional.RetryAsync<TResult>(System.Func<System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TResult>>>! producer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<TResult>
static Funcky.AsyncSequence.Concat<TSource>(params System.Collections.Generic.IAsyncEnumerable<TSource>![]! sources) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static Funcky.AsyncSequence.Concat<TSource>(System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IAsyncEnumerable<TSource>!>! sources) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static Funcky.AsyncSequence.Concat<TSource>(System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IEnumerable<TSource>!>! sources) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static Funcky.AsyncSequence.Concat<TSource>(System.Collections.Generic.IEnumerable<System.Collections.Generic.IAsyncEnumerable<TSource>!>! sources) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static Funcky.AsyncSequence.Cycle<TItem>(TItem element) -> System.Collections.Generic.IAsyncEnumerable<TItem>!
static Funcky.AsyncSequence.CycleRange<TItem>(System.Collections.Generic.IAsyncEnumerable<TItem>! sequence) -> Funcky.IAsyncBuffer<TItem>!
static Funcky.AsyncSequence.FromNullable<T>(T? item) -> System.Collections.Generic.IAsyncEnumerable<T!>!
static Funcky.AsyncSequence.FromNullable<T>(T? item) -> System.Collections.Generic.IAsyncEnumerable<T>!
static Funcky.AsyncSequence.RepeatRange<TItem>(System.Collections.Generic.IAsyncEnumerable<TItem>! sequence, int count) -> Funcky.IAsyncBuffer<TItem>!
static Funcky.AsyncSequence.Return<TItem>(TItem item) -> System.Collections.Generic.IAsyncEnumerable<TItem>!
static Funcky.AsyncSequence.Return<TItem>(params TItem[]! items) -> System.Collections.Generic.IAsyncEnumerable<TItem>!
static Funcky.AsyncSequence.Successors<TItem>(Funcky.Monads.Option<TItem> first, System.Func<TItem, System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TItem>>>! successor) -> System.Collections.Generic.IAsyncEnumerable<TItem>!
static Funcky.AsyncSequence.Successors<TItem>(Funcky.Monads.Option<TItem> first, System.Func<TItem, System.Threading.Tasks.ValueTask<TItem>>! successor) -> System.Collections.Generic.IAsyncEnumerable<TItem>!
static Funcky.AsyncSequence.Successors<TItem>(TItem first, System.Func<TItem, System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TItem>>>! successor) -> System.Collections.Generic.IAsyncEnumerable<TItem>!
static Funcky.AsyncSequence.Successors<TItem>(TItem first, System.Func<TItem, System.Threading.Tasks.ValueTask<TItem>>! successor) -> System.Collections.Generic.IAsyncEnumerable<TItem>!
static Funcky.Monads.EitherAsyncExtensions.Sequence<TLeft, TRight>(this Funcky.Monads.Either<TLeft, System.Collections.Generic.IAsyncEnumerable<TRight>!> either) -> System.Collections.Generic.IAsyncEnumerable<Funcky.Monads.Either<TLeft, TRight>>!
static Funcky.Monads.EitherAsyncExtensions.Sequence<TLeft, TRight>(this Funcky.Monads.Either<TLeft, System.Threading.Tasks.Task<TRight>!> either) -> System.Threading.Tasks.Task<Funcky.Monads.Either<TLeft, TRight>>!
static Funcky.Monads.EitherAsyncExtensions.Sequence<TLeft, TRight>(this Funcky.Monads.Either<TLeft, System.Threading.Tasks.ValueTask<TRight>> either) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Either<TLeft, TRight>>
static Funcky.Monads.EitherAsyncExtensions.Traverse<TLeft, TRight, T>(this Funcky.Monads.Either<TLeft, TRight> either, System.Func<TRight, System.Collections.Generic.IAsyncEnumerable<T>!>! selector) -> System.Collections.Generic.IAsyncEnumerable<Funcky.Monads.Either<TLeft, T>>!
static Funcky.Monads.EitherAsyncExtensions.Traverse<TLeft, TRight, T>(this Funcky.Monads.Either<TLeft, TRight> either, System.Func<TRight, System.Threading.Tasks.Task<T>!>! selector) -> System.Threading.Tasks.Task<Funcky.Monads.Either<TLeft, T>>!
static Funcky.Monads.EitherAsyncExtensions.Traverse<TLeft, TRight, T>(this Funcky.Monads.Either<TLeft, TRight> either, System.Func<TRight, System.Threading.Tasks.ValueTask<T>>! selector) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Either<TLeft, T>>
static Funcky.Monads.OptionAsyncExtensions.Sequence<TItem>(this Funcky.Monads.Option<System.Collections.Generic.IAsyncEnumerable<TItem>!> option) -> System.Collections.Generic.IAsyncEnumerable<Funcky.Monads.Option<TItem>>!
static Funcky.Monads.OptionAsyncExtensions.Sequence<TItem>(this Funcky.Monads.Option<System.Threading.Tasks.Task<TItem>!> option) -> System.Threading.Tasks.Task<Funcky.Monads.Option<TItem>>!
static Funcky.Monads.OptionAsyncExtensions.Sequence<TItem>(this Funcky.Monads.Option<System.Threading.Tasks.ValueTask<TItem>> option) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TItem>>
static Funcky.Monads.OptionAsyncExtensions.Traverse<TItem, T>(this Funcky.Monads.Option<TItem> option, System.Func<TItem, System.Collections.Generic.IAsyncEnumerable<T>!>! selector) -> System.Collections.Generic.IAsyncEnumerable<Funcky.Monads.Option<T>>!
static Funcky.Monads.OptionAsyncExtensions.Traverse<TItem, T>(this Funcky.Monads.Option<TItem> option, System.Func<TItem, System.Threading.Tasks.Task<T>!>! selector) -> System.Threading.Tasks.Task<Funcky.Monads.Option<T>>!
static Funcky.Monads.OptionAsyncExtensions.Traverse<TItem, T>(this Funcky.Monads.Option<TItem> option, System.Func<TItem, System.Threading.Tasks.ValueTask<T>>! selector) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<T>>
static Funcky.Monads.ResultAsyncExtensions.Sequence<TValidResult>(this Funcky.Monads.Result<System.Collections.Generic.IAsyncEnumerable<TValidResult>!> result) -> System.Collections.Generic.IAsyncEnumerable<Funcky.Monads.Result<TValidResult>>!
static Funcky.Monads.ResultAsyncExtensions.Sequence<TValidResult>(this Funcky.Monads.Result<System.Threading.Tasks.Task<TValidResult>!> result) -> System.Threading.Tasks.Task<Funcky.Monads.Result<TValidResult>>!
static Funcky.Monads.ResultAsyncExtensions.Sequence<TValidResult>(this Funcky.Monads.Result<System.Threading.Tasks.ValueTask<TValidResult>> result) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Result<TValidResult>>
static Funcky.Monads.ResultAsyncExtensions.Traverse<TValidResult, T>(this Funcky.Monads.Result<TValidResult> result, System.Func<TValidResult, System.Collections.Generic.IAsyncEnumerable<T>!>! selector) -> System.Collections.Generic.IAsyncEnumerable<Funcky.Monads.Result<T>>!
static Funcky.Monads.ResultAsyncExtensions.Traverse<TValidResult, T>(this Funcky.Monads.Result<TValidResult> result, System.Func<TValidResult, System.Threading.Tasks.Task<T>!>! selector) -> System.Threading.Tasks.Task<Funcky.Monads.Result<T>>!
static Funcky.Monads.ResultAsyncExtensions.Traverse<TValidResult, T>(this Funcky.Monads.Result<TValidResult> result, System.Func<TValidResult, System.Threading.Tasks.ValueTask<T>>! selector) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Result<T>>
