<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <TargetFrameworks>net7.0;net6.0;net5.0;netcoreapp3.1;netstandard2.0;netstandard2.1</TargetFrameworks>
        <TargetFrameworks Condition="'$(FunckyBuildWithPreviewTargetFramework)' == 'true'">net8.0;$(TargetFrameworks)</TargetFrameworks>
        <LangVersion>preview</LangVersion>
        <Nullable>enable</Nullable>
        <Product>Funcky</Product>
        <Description>Funcky is a functional C# library</Description>
        <PackageTags>Functional Monad Linq</PackageTags>
        <VersionPrefix>3.1.0</VersionPrefix>
        <IncludeSymbols>true</IncludeSymbols>
        <SymbolPackageFormat>snupkg</SymbolPackageFormat>
        <PackageReadmeFile>README.md</PackageReadmeFile>
    </PropertyGroup>
    <PropertyGroup>
        <EnableNETAnalyzers>true</EnableNETAnalyzers>
        <AnalysisModeReliability>All</AnalysisModeReliability>
        <EnablePackageValidation>true</EnablePackageValidation>
    </PropertyGroup>
    <PropertyGroup>
        <DefineConstants>$(DefineConstants);CONTRACTS_FULL</DefineConstants>
    </PropertyGroup>
    <ItemGroup>
        <PackageReference Include="Microsoft.CodeAnalysis.PublicApiAnalyzers" PrivateAssets="all" Condition="'$(TargetFramework)' == 'net7.0'" />
        <PackageReference Include="Microsoft.Bcl.HashCode" Condition="'$(TargetFramework)' == 'netstandard2.0'" />
        <PackageReference Include="Nullable" PrivateAssets="all" />
        <PackageReference Include="IsExternalInit" PrivateAssets="all" />
        <PackageReference Include="System.Collections.Immutable" Condition="'$(TargetFramework)' == 'netstandard2.0' Or '$(TargetFramework)' == 'netstandard2.1'" />

        <!-- .NET Core 3.1 ships with System.Text.Json, but we reference the NuGet version instead, so we always get System.Text.Json >= 5.0.0. It is the first version to never return null converter from CreateConverter(...). -->
        <PackageReference Include="System.Text.Json" Condition="'$(TargetFramework)' == 'netstandard2.0' Or '$(TargetFramework)' == 'netstandard2.1' Or '$(TargetFramework)' == 'netcoreapp3.1'" />
    </ItemGroup>
    <ItemGroup>
        <ProjectReference Include="..\Funcky.SourceGenerator\Funcky.SourceGenerator.csproj" OutputItemType="Analyzer" ReferenceOutputAssembly="false" PrivateAssets="all" />
    </ItemGroup>
    <ItemGroup>
        <AdditionalFiles Include="PublicAPI.Shipped.txt" />
        <AdditionalFiles Include="PublicAPI.Unshipped.txt" />
    </ItemGroup>
    <!-- The condition is a workaround for a weird error that we get in the .NET 8 SDK:
         Unable to optimize assemblies for size: a valid runtime package was not found. -->
    <PropertyGroup Condition="'$(TargetFramework)' != 'netstandard2.1'">
        <IsTrimmable>true</IsTrimmable>
        <EnableTrimAnalyzer>true</EnableTrimAnalyzer>
    </PropertyGroup>
    <ItemGroup>
        <None Include="build/Funcky.targets" Pack="true" PackagePath="build" />
        <None Include="build/Funcky.targets" Pack="true" PackagePath="buildTransitive" />
        <None Include="..\README.md" Pack="true" PackagePath="\" />
        <None Include="..\Funcky.Analyzers\Funcky.BuiltinAnalyzers\bin\$(Configuration)\netstandard2.0\Funcky.BuiltinAnalyzers.dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
        <None Include="..\Funcky.Analyzers\Funcky.Analyzers.Package\tools\*.ps1" Pack="true" PackagePath="tools\%(FileName)%(Extension)" Visible="false" />
    </ItemGroup>
    <ItemGroup>
        <EmbeddedResource Include="ILLink.LinkAttributes.xml" LogicalName="ILLink.LinkAttributes.xml" />
    </ItemGroup>
    <Import Project="..\Analyzers.props" />
    <Import Project="..\GlobalUsings.props" />
    <Import Project="..\FrameworkFeatureConstants.props" />
</Project>
